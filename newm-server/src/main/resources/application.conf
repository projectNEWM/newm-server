ktor {
    development = false
    deployment {
        port = 3939
        port = ${?PORT}
        connectionIdleTimeoutSeconds = 30
        parallelism = 12
        connectionGroupSize = 13
        workerGroupSize = 13
        callGroupSize = 24
        cookieDomain = "newm.io"
        cookieDomain = ${?COOKIE_DOMAIN}
    }
    application {
        modules = [io.newm.server.ApplicationKt.module]
    }
}

oauth {
    google {
        clientId = ${AWS_SECRET_ARN}
        clientSecret = ${AWS_SECRET_ARN}
        accessTokenUrl = "https://accounts.google.com/o/oauth2/token"
        userInfoUrl = "https://www.googleapis.com/oauth2/v2/userinfo"
    }
    facebook {
        clientId = ${AWS_SECRET_ARN}
        clientSecret = ${AWS_SECRET_ARN}
        accessTokenUrl = "https://graph.facebook.com/oauth/access_token"
        userInfoUrl = "https://graph.facebook.com/v13.0/me"
    }
    linkedin {
        clientId = ${AWS_SECRET_ARN}
        clientSecret = ${AWS_SECRET_ARN}
        accessTokenUrl = "https://www.linkedin.com/oauth/v2/accessToken"
        userInfoUrl = "https://api.linkedin.com/v2/me"
        userExtraInfoUrl = "https://api.linkedin.com/v2/clientAwareMemberHandles"
    }
    apple {
        clientId = ${AWS_SECRET_ARN}
        clientSecret = ${AWS_SECRET_ARN}
        accessTokenUrl = "https://appleid.apple.com/auth/token"
        publicKeysUrl = "https://appleid.apple.com/auth/keys"
        audiences = ${AWS_SECRET_ARN}
    }
}

jwt {
    realm = "NEWM Server"
    issuer = "https://newm.io"
    audience = "newm-server-users"
    secret = ${AWS_SECRET_ARN}
    cacheSize = 10
    cacheExpiresIn = 24
    access {
        timeToLive = 3600
    }
    refresh {
        timeToLive = 604800
    }
}

email {
    enabled = true
    smtpHost = ${AWS_SECRET_ARN}
    smtpPort = ${EMAIL_SMTP_PORT}
    sslOnConnect = true
    userName = ${AWS_SECRET_ARN}
    password = ${AWS_SECRET_ARN}
    from = ${AWS_SECRET_ARN}
    arguments {
        webAppUrl = ${WEB_APP_URL}
    }
}

twoFactorAuth {
    codeSize = 6
    timeToLive = 300
    joinEmail {
        subject = "Your NEWM verification code"
        messageUrl = "/email/2fa-code-join.html"
        messageUrl = ${?EMAIL_2FA_JOIN_MESSAGE_URL}
    }
    resetEmail {
        subject = "Here is your verification code"
        messageUrl = "/email/2fa-code-reset.html"
        messageUrl = ${?EMAIL_2FA_RESET_MESSAGE_URL}
    }
}

database {
    driverClassName = org.postgresql.Driver
    jdbcUrl = ${AWS_SECRET_ARN}
    username = ${AWS_SECRET_ARN}
    password = ${AWS_SECRET_ARN}
}

cors {
    hosts = [${CORS_HOSTS}]
}

sentry {
    dsn = ${SENTRY_DSN}
    environment = "development"
    environment = ${?SENTRY_ENVIRONMENT}
}

cloudinary {
    url = ${CLOUDINARY_URL}
}

aws {
    region = ${AWS_REGION}
    s3 {
        audio {
            bucketName = ${AWS_AUDIO_BUCKET}
            minFileSize = 1000000
            maxFileSize = 1024000000
            minDuration = 30
            minSampleRate = 44100
        }
        agreement {
            bucketName = ${AWS_AGREEMENT_BUCKET}
            fileName = "StreamTokenAgreement.pdf"
        }
    }
    sqs {
        audio {
            queueUrl = ${AWS_AUDIO_SQS_QUEUE_URL}
            waitTime = 20
            delayTimeMs = 1000
            receiver = io.newm.server.features.song.AudioMessageReceiver
        }
        minting {
            queueUrl = ${AWS_MINTING_SQS_QUEUE_URL}
            waitTime = 20
            delayTimeMs = 1000
            receiver = io.newm.server.features.minting.MintingMessageReceiver
        }
    }
    cloudFront {
        audioStream {
            hostUrl = ${AWS_AUDIO_CLOUDFRONT_HOST_URL}
            keyPairId = ${AWS_SECRET_ARN}
            privateKey = ${AWS_SECRET_ARN}
        }
    }
    kms {
        keyId = ${AWS_SECRET_ARN}
    }
}

idenfy {
    apiKey = ${AWS_SECRET_ARN}
    apiSecret = ${AWS_SECRET_ARN}
    sessionUrl = "https://ivs.idenfy.com/api/v2/token"

    signature {
        key = ${AWS_SECRET_ARN}
        algorithm = "HmacSHA256"
    }
    verifiedEmail {
        subject = "Congrats, youâ€™ve been verified!"
        messageUrl = "/email/kyc-verified.html"
        messageUrl = ${?EMAIL_KYC_VERIFIED_MESSAGE_URL}
    }
    unverifiedEmail {
        subject = "[NOTICE] Your identity could not be verified"
        messageUrl = "/email/kyc-unverified.html"
        messageUrl = ${?EMAIL_KYC_UNVERIFIED_MESSAGE_URL}
    }
    pendingEmail {
        subject = "KYC verification in progress"
        messageUrl = "/email/kyc-pending.html"
        messageUrl = ${?EMAIL_KYC_PENDING_MESSAGE_URL}
    }
}

arweave {
    scheme = "https"
    host = "arweave.net"
    walletJson = ${ARWEAVE_WALLET_JSON}
    minWalletBalance = 0.5
    lambdaFunctionName = ${WEAVE_UPLOAD_ARN}
    warningEmail {
        to = "devops@projectnewm.io"
        subject = "WARNING - Low Arweave Wallet Balance"
        messageUrl = "/email/arweave-warning.html"
        messageUrl = ${?EMAIL_ARWEAVE_WARNING_URL}
    }
}

eveara {
    server = ${EVEARA_SERVER}
    clientId = ${AWS_SECRET_ARN}
    clientSecret = ${AWS_SECRET_ARN}
}

newmChain {
    host = ${NEWM_CHAIN_HOST}
    port = 3737
    port = ${?NEWM_CHAIN_PORT}
    jwt = ${AWS_SECRET_ARN}
    secure = true
    secure = ${?NEWM_CHAIN_SECURE}
}

collaboration {
    email {
        subject = "Youâ€™ve been added as a collaborator!"
        messageUrl = "/email/collab-invitation.html"
        messageUrl = ${?EMAIL_COLLAB_INVITATION_MESSAGE_URL}
    }
}

mintingNotifications {
    started {
        subject = "The minting process is underway!"
        messageUrl = "/email/mint-started.html"
        messageUrl = ${?EMAIL_MINT_STARTED_MESSAGE_URL}
    }
    succeeded {
        subject = "Success! Your song is now minted... ðŸ¥³"
        messageUrl = "/email/mint-succeeded.html"
        messageUrl = ${?EMAIL_MINT_SUCCEDED_MESSAGE_URL}
    }
    failed {
        subject = "Song minting unsuccessful ðŸ˜¢"
        messageUrl = "/email/mint-failed.html"
        messageUrl = ${?EMAIL_MINT_FAILED_MESSAGE_URL}
    }
}
