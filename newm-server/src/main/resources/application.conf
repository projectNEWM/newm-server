ktor {
    development = false
    deployment {
        port = 3939
        port = ${?PORT}
        connectionIdleTimeoutSeconds = 30
        parallelism = 12
        connectionGroupSize = 13
        workerGroupSize = 13
        callGroupSize = 24
    }
    application {
        modules = [io.newm.server.ApplicationKt.module]
    }
}

oauth {
    google {
        accessTokenUrl = "https://accounts.google.com/o/oauth2/token"
        clientId = ${GOOGLE_CLIENT_ID}
        clientSecret = ${GOOGLE_CLIENT_SECRET}
    }
    facebook {
        accessTokenUrl = "https://graph.facebook.com/oauth/access_token"
        clientId = ${FACEBOOK_CLIENT_ID}
        clientSecret = ${FACEBOOK_CLIENT_SECRET}
    }
    linkedin {
        accessTokenUrl = "https://www.linkedin.com/oauth/v2/accessToken"
        clientId = ${LINKEDIN_CLIENT_ID}
        clientSecret = ${LINKEDIN_CLIENT_SECRET}
    }
}

jwt {
    realm = "NEWM Server"
    issuer = "https://newm.io"
    audience = "newm-server-users"
    secret = ${NEWM_JWT_SECRET}
    cacheSize = 10
    cacheExpiresIn = 24
    access {
        timeToLive = 3600
    }
    refresh {
        timeToLive = 604800
    }
}

emailAuth {
    codeSize = 6
    timeToLive = 300
    smtpHost = ${EMAIL_AUTH_SMTP_HOST}
    smtpPort = ${EMAIL_AUTH_SMTP_PORT}
    sslOnConnect = true
    userName = ${EMAIL_AUTH_USERNAME}
    password = ${EMAIL_AUTH_PASSWORD}
    from = ${EMAIL_AUTH_FROM}
    subject = "NEWM Verification Code"
    messageUrl = "/email/2fa-code.html"
    messageUrl = ${?EMAIL_2FA_MESSAGE_URL}
}

database {
    driverClassName = org.postgresql.Driver
    jdbcUrl = ${DATABASE_JDBC_URL}
    username = ${DATABASE_USERNAME}
    password = ${DATABASE_PASSWORD}
}

cors {
    hosts = [${CORS_HOSTS}]
}

sentry {
    dsn = ${SENTRY_DSN}
}

cloudinary {
    url = ${CLOUDINARY_URL}
}

aws {
    accessKeyId = ${AWS_ACCESS_KEY_ID}
    secretKey = ${AWS_SECRET_KEY}
    region = ${AWS_REGION}
    s3 {
        audio {
            bucketName = ${AWS_AUDIO_BUCKET}
            timeToLive = 180
            maxUploadSizeMB = 500
            minUploadSizeMB = 1
        }
        agreement {
            bucketName = ${AWS_AGREEMENT_BUCKET}
            fileName = "StreamTokenAgreement.pdf"
        }
    }
    sqs {
        audio {
            queueUrl = ${AWS_AUDIO_SQS_QUEUE_URL}
            waitTime = 20
            delayTimeMs = 1000
            receiver = io.newm.server.features.song.AudioMessageReceiver
        }
        minting {
            queueUrl = ${AWS_MINTING_SQS_QUEUE_URL}
            waitTime = 20
            delayTimeMs = 1000
            receiver = io.newm.server.features.minting.MintingMessageReceiver
        }
    }
    cloudFront {
        audioStream {
            hostUrl = ${AWS_AUDIO_CLOUDFRONT_HOST_URL}
        }
    }
    kms {
        keyId = ${AWS_KMS_KEY_ID}
    }
}

idenfy {
    apiKey = ${IDENFY_API_KEY}
    apiSecret = ${IDENFY_API_SECRET}
    sessionUrl = "https://ivs.idenfy.com/api/v2/token"

    signature {
        Key = ${IDENFY_SIGNATURE_KEY}
        algorithm = "HmacSHA256"
    }
    email {
        enabled = true
        smtpHost = ${EMAIL_AUTH_SMTP_HOST}
        smtpPort = ${EMAIL_AUTH_SMTP_PORT}
        sslOnConnect = true
        userName = ${EMAIL_AUTH_USERNAME}
        password = ${EMAIL_AUTH_PASSWORD}
        from = ${EMAIL_AUTH_FROM}
        subject = "NEWM Identity Verification Status"
        verifiedMessageUrl = "/email/kyc-verified.html"
        verifiedMessageUrl = ${?EMAIL_KYC_VERIFIED_MESSAGE_URL}
        unverifiedMessageUrl = "/email/kyc-unverified.html"
        unverifiedMessageUrl = ${?EMAIL_KYC_UNVERIFIED_MESSAGE_URL}
        pendingMessageUrl = "/email/kyc-pending.html"
        pendingMessageUrl = ${?EMAIL_KYC_PENDING_MESSAGE_URL}
    }
}

eveara {
    server = ${EVARA_SERVER}
    clientId = ${EVEARA_CLIENT_ID}
    clientSecret = ${EVEARA_CLIENT_SECRET}
}

newmChain {
    host = ${NEWM_CHAIN_HOST}
    port = 3737
    port = ${?NEWM_CHAIN_PORT}
    jwt = ${NEWM_CHAIN_JWT}
}